{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from typing import Any\nfrom argparse import Namespace\nimport typing\n\nimport numpy as np\nimport pandas as pd\nimport torch\n\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.metrics import roc_auc_score as compute_auc\n\n\nclass DotDict(Namespace):\n    \"\"\"A simple class that builds upon `argparse.Namespace`\n    in order to make chained attributes possible.\"\"\"\n\n    def __init__(self, temp=False, key=None, parent=None) -> None:\n        self._temp = temp\n        self._key = key\n        self._parent = parent\n\n    def __eq__(self, other):\n        if not isinstance(other, DotDict):\n            return NotImplemented\n        return vars(self) == vars(other)\n\n    def __getattr__(self, __name: str) -> Any:\n        if __name not in self.__dict__ and not self._temp:\n            self.__dict__[__name] = DotDict(temp=True, key=__name, parent=self)\n        else:\n            del self._parent.__dict__[self._key]\n            raise AttributeError(\"No attribute '%s'\" % __name)\n        return self.__dict__[__name]\n\n    def __repr__(self) -> str:\n        item_keys = [k for k in self.__dict__ if not k.startswith(\"_\")]\n\n        if len(item_keys) == 0:\n            return \"DotDict()\"\n        elif len(item_keys) == 1:\n            key = item_keys[0]\n            val = self.__dict__[key]\n            return \"DotDict(%s=%s)\" % (key, repr(val))\n        else:\n            return \"DotDict(%s)\" % \", \".join(\n                \"%s=%s\" % (key, repr(val)) for key, val in self.__dict__.items()\n            )\n\n    @classmethod\n    def from_dict(cls, original: typing.Mapping[str, any]) -> \"DotDict\":\n        \"\"\"Create a DotDict from a (possibly nested) dict `original`.\n        Warning: this method should not be used on very deeply nested inputs,\n        since it's recursively traversing the nested dictionary values.\n        \"\"\"\n        dd = DotDict()\n        for key, value in original.items():\n            if isinstance(value, typing.Mapping):\n                value = cls.from_dict(value)\n            setattr(dd, key, value)\n        return dd\n\n\ndef compute_pauc(y_true, y_pred, min_tpr: float=0.80) -> float:\n    '''\n    2024 ISIC Challenge metric: pAUC\n    \n    Given a solution file and submission file, this function returns the\n    the partial area under the receiver operating characteristic (pAUC) \n    above a given true positive rate (TPR) = 0.80.\n    https://en.wikipedia.org/wiki/Partial_Area_Under_the_ROC_Curve.\n    \n    (c) 2024 Nicholas R Kurtansky, MSKCC\n\n    Args:\n        y_true: ground truth of 1s and 0s\n        y_pred: predictions of scores ranging [0, 1]\n\n    Returns:\n        Float value range [0, max_fpr]\n    '''\n\n    # rescale the target. set 0s to 1s and 1s to 0s (since sklearn only has max_fpr)\n    v_gt = abs(y_true-1)\n    \n    # flip the submissions to their compliments\n    v_pred = -1.0 * y_pred\n\n    max_fpr = abs(1 - min_tpr)\n\n    # using sklearn.metric functions: (1) roc_curve and (2) auc\n    fpr, tpr, _ = roc_curve(v_gt, v_pred, sample_weight=None)\n    if max_fpr is None or max_fpr == 1:\n        return auc(fpr, tpr)\n    if max_fpr <= 0 or max_fpr > 1:\n        raise ValueError(\"Expected min_tpr in range [0, 1), got: %r\" % min_tpr)\n        \n    # Add a single point at max_fpr by linear interpolation\n    stop = np.searchsorted(fpr, max_fpr, \"right\")\n    x_interp = [fpr[stop - 1], fpr[stop]]\n    y_interp = [tpr[stop - 1], tpr[stop]]\n    tpr = np.append(tpr[:stop], np.interp(max_fpr, x_interp, y_interp))\n    fpr = np.append(fpr[:stop], max_fpr)\n    partial_auc = auc(fpr, tpr)\n\n#     # Equivalent code that uses sklearn's roc_auc_score\n#     v_gt = abs(np.asarray(solution.values)-1)\n#     v_pred = np.array([1.0 - x for x in submission.values])\n#     max_fpr = abs(1-min_tpr)\n#     partial_auc_scaled = roc_auc_score(v_gt, v_pred, max_fpr=max_fpr)\n#     # change scale from [0.5, 1.0] to [0.5 * max_fpr**2, max_fpr]\n#     # https://math.stackexchange.com/questions/914823/shift-numbers-into-a-different-range\n#     partial_auc = 0.5 * max_fpr**2 + (max_fpr - 0.5 * max_fpr**2) / (1.0 - 0.5) * (partial_auc_scaled - 0.5)\n    \n    return(partial_auc)\n\n    \ndef get_folds():\n    folds_df = pd.read_csv(\"/kaggle/input/isic-scd-artifacts/folds.csv\")\n    return folds_df\n\n\ndef time_to_str(duration, unit='sec'):\n    if unit == 'min':\n        minutes = int(duration // 60)\n        seconds = duration % 60\n        return f\"{minutes} min {seconds:.2f} sec\"\n    else:\n        return f\"{duration:.2f} sec\"\n\ndef set_seed(seed=0):\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)","metadata":{"_uuid":"a8c9a6b2-3eaa-4fc3-8e4c-2dd49cea6e06","_cell_guid":"96e1a844-b2df-4785-b121-13e25cacbaa3","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}